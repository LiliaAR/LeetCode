/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val === undefined ? 0 : val);
 *     this.next = (next === undefined ? null : next);
 * }
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function(l1, l2) {
    let dummyHead = new ListNode(0); // A dummy node to simplify list creation
    let current = dummyHead;        // Pointer to build the result list
    let carry = 0;                  // To handle carry over from sums

    // Iterate through both lists until both are fully traversed
    while (l1 !== null || l2 !== null) {
        const x = l1 ? l1.val : 0;  // Value of the current node in l1, or 0 if null
        const y = l2 ? l2.val : 0;  // Value of the current node in l2, or 0 if null
        const sum = x + y + carry;  // Add the two values and the carry

        carry = Math.floor(sum / 10); // Update carry for sums >= 10
        current.next = new ListNode(sum % 10); // Add the current digit to the result list
        current = current.next; // Move the pointer forward

        // Move to the next nodes in l1 and l2, if available
        if (l1) l1 = l1.next;
        if (l2) l2 = l2.next;
    }

    // If there's still a carry, add it as the last node
    if (carry > 0) {
        current.next = new ListNode(carry);
    }

    return dummyHead.next; // Return the result list, skipping the dummy head
};
